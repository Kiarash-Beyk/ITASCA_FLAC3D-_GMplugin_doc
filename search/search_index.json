{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"General notes","text":"<p>All functions are run on FLAC3D version 7 and use some FLAC3D built-in utilities. Modeling settings are: </p> <p> All Z values are TVDSS shown as negative (-) numbers below mean sea level. all imported data must follow  this convention </p> <p> Invalid data (log and zone property) is -9999 </p> <p> Invalid depth values (well picks, or any other depth related) 9999 </p> <p> Most functions generate an informative error message if fail to operate successfully. The message is  printed in FLAC3D command window upon function run.  </p>"},{"location":"auxiliary-functions.html","title":"Auxiliary Functions","text":"<p>Functions in this section can be used to make model adjustments. </p> <p> add_well(wname,fname_): function to add a single well trajectory (none offset well) </p> <p>Note: </p> <ul> <li> <p>Wells imported by this function are added to \u201cadded_Wells\u201d list and are just for data visualization and inquiry</p> </li> <li> <p>These wells are not included in data interpolation, so no need to import logs for these wells </p> </li> </ul> <p>Argument:</p> <ol> <li>user-defined well name </li> <li>well trajectory file name. Well trajectory file format must follow x,y,TVDSS (CSV file) and stored in  \"Deviation\" folder </li> </ol> <p> topography_isoDept: Function to generate depth contours on formation horizon surfaces </p> <p>Note: </p> <p>TVDSS is stored on geometry node extra 2  Argument: None </p> <p> formation_element_cnt: counts number of zones in each formation in model and list it in command  window. No export to file </p> <p>Note: None </p> <p>Argument: None </p> <p> geom_node_expor(formation): function to export a formation horizon as xyz points. Can be used to  generate synthetic horizons by manipulation in Rhino.</p> <p>Note: </p> <p>Exports to \"Output/formation_Top_xyz_F3D.csv\" </p> <p>Argument:</p> <ol> <li>Formation name as in \u201cHorizons\u201d list </li> </ol> <p> Shmin_SHmax_azimuth(extra1,extra2,extra3): Function to loop through all zones and calculate and save  Shmin, SHmax and SHmax azimuth (+CW from North), and store in user-defined zone extras </p> <p>Note: None </p> <p>Argument:   </p> <ol> <li>zone extra number (integer) for Shmin </li> <li>zone extra number (integer) for SHmax </li> <li>zone extra number (integer) for SHmax azimuth (+CW)</li> </ol> <p> license_check: reports days left on 3D Geomechanics Plug-in.  </p> <p>Note:  </p> <ul> <li>Type in the following command in FLAC3D command line to execute the function: \u201c@license_check\u201d. </li> <li>Project set up functionalities do not work on an expired license. The data interpretation and export  utilities still remain functional</li> </ul> <p>Argument:  None</p>"},{"location":"data-interpolation.html","title":"Data Interpolation Functions","text":"<p>The following functions should be used to interpolate offset well logs imported into model. Two methods are  available: Kriging and Inverse Distance Weighted (IDW) method. The former is performed externally using Python  scripts (see Appendix 1), using the offset well logs and FLAC3D mesh, already prepared and processed using the  previous functions and exported using the following functions. The latter is performed internally using the  respective functions described in this section.</p> <p>Kriging-related functions:</p> <p> export_importedLog_allWells: exports well logs for kriging operation for all wells existing in \"Wells\" List  </p> <p>Note:  </p> <p>This is the main function to be used for log preparation and export for kriging  Argument: None </p> <p> export_zoneData_perFormation(formationName): exports FLAC3D mesh data for kriging </p> <p>Note: </p> <p>This function APPENDS (not overwrites) to \"Output/F3D_Zone_IDs.csv\" after each call. Must be executed  for each formation in the model separately</p> <p>Argument: </p> <ol> <li>formation name (must exist in 'Horizons' List)  </li> </ol> <p> import_krigging_parameter(fileName,log_parameter): imports kriging data (Kriging is performed by  Python code out of FLAC3D \u2013 refer to Appendix I) and saves interpolated values on zone extras  corresponding to log parameters  </p> <p>Note: </p> <p>Must be called for each log parameter separately.  </p> <p>Argument: </p> <ol> <li>File Name - must exist in \"Input/\" folder. Contents must follow this format: zoneID, attribute (log  parameter) saved as csv file </li> <li>Log Parameter - must exist in \"Logs\" list </li> </ol> <p>IDW-Related Functions  </p> <p> zone_log_interpolator(formation,log_pick_method,iwdExp,user_defined_sr): function to interpolate log  data on mesh using IDW method </p> <p>Note:  </p> <p>It operates on all log parameters existing in \u201cLogs\u201d list </p> <p>Argument: </p> <ol> <li>name of formation on which data is populated. The formation name must exist in \"Horizons\" list (and  on slot \"Geology\") </li> <li>log smoothing method: enter \"1\" for smoothing (on \"user_defined_sr\" interval in relative depth sense  0-1), \"2\" for not smoothing (interpolation using unsmoothed original log) </li> <li>IDW exponent ranging from 1-3. use higher value for more weight on proximity to wells (will result in  less smooth and patchy interpolation. Use higher values where there is a good number of wells  distributed throughout the model) </li> <li>log smoothing interval in relative depth sense. If entered '0' model will calculate smoothing interval  based on average zone height in formation and interpolation will run slower </li> </ol> <p> zone_log_interpolator_oneParameter(formation,log,log_pick_method,iwdExp,user_defined_sr):function to interpolate log data on numerical mesh using IDW method  </p> <p>Note: </p> <p>Similar to previous function but works on just one log parameter </p> <p>Argument: </p> <ol> <li>name of formation on which data is populated. Formation name must exist on \"Horizons\" map on slot  \"Geology\" </li> <li>log data to be interpolated in model. log property must exist in \"Logs\" List </li> <li>log smoothing method: enter \"1\" for smoothing (on \"user_defined_sr\" interval in relative depth sense  0-1), \"2\" for not smoothing (interpolation using unsmoothed original log) </li> <li>IDW exponent ranging from 1-3. use higher value for more weight on proximity to wells (will result in  less smooth and patchy interpolation. Use higher values where there is a good number of wells  distributed throughout the model) </li> <li>log smoothing interval in relative depth sense. If entered '0' model will calculate smoothing interval  based on average zone height in formation and interpolation will run slower </li> </ol> <p>Constant value assignment </p> <p> log_assign_zone(formation,log,value): Function to assign a constant log value to a formation  (automatically assigned corresponding to that log parameter) </p> <p>Note:  </p> <p>This function is usually used for shallow formations where no log exists  Assigns log value to a FLAC3D zone extra memory corresponding to log parameters already set in model  by \u201cLogs\u201d list </p> <p>Argument: </p> <ol> <li>formation name: must exist in model on \"Geology\" slot (in \"Horizons\" map) </li> <li>log parameter name: must exist in imported well logs (in \"Logs\" map) </li> <li>user defined log value to be stored in zone extra  Data Control and Inquiry Functions. These functions can be used to assess, visualize and make inquiries after data  population  </li> </ol> <p> plot_F3D_log(well,log_para): function to plot interpolated log value in model along an existing offset well </p> <p>Note:  </p> <ul> <li>At least one valid log must have been imported for the given well for the function to operate </li> <li>Use \"Plot Table\" FLAC3D command to see the results. x-axis is TVDSS, y-axis is log value </li> </ul> <p>Argument:</p> <ol> <li>well name: must exist in \"Wells\" list </li> <li>log parameter name: must exist in \"Logs\" list</li> </ol> <p> plot_F3D_log_rDepth(formation,well,log_para): function to plot interpolated log value in model along a  well for a given formation.  </p> <p>Note:  </p> <p>Use \"Plot Table\" FLAC3D command to see the results. x-axis is relative depth, ranging from 0 (formation  top) to 1 (formation bottom), y-axis is log value</p> <p>Argument :</p> <ol> <li>Formation name: must exist in \"Horizons\" List  </li> <li>Well name: must exist in \"Wells\" List </li> <li>Log name: must exist in \"Logs\" List </li> </ol> <p> export_log_histogram(log,min,max,bin_cnt): Function to export histogram of a given interpolated log  parameter in all formations </p> <p>Note: </p> <ul> <li>Values are from FLAC3D zones assigned by interpolation and saved on zone extra memory number  corresponding to the log parameter </li> <li>exports to \"Output/Histogram_log.csv\". both frequency and percentage are exported </li> </ul> <p>Argument:</p> <ol> <li>Log name: must exist in \"Logs\" list and populated on mesh </li> <li>minimum value </li> <li>maximum value </li> <li>no of bins for histogram (max-min divider)  </li> </ol> <p> export_log_histogram_formation(formation,log,min,max,bin_cnt): Function to export histogram of a  given interpolated log parameter in a given one formation </p> <p>Note: </p> <ul> <li>Values are from FLAC3D zones assigned by interpolation and saved on zone extra memory number  corresponding to the log parameter </li> <li>exports to \"Output/ Histogram_formation_log.csv\". both frequency and percentage are exported </li> </ul> <p>Argument:</p> <ol> <li>Formation name: must exist in \"Horizons\" List  </li> <li>Log name: must exist in \"Logs\" list and populated on mesh </li> <li>minimum value </li> <li>maximum value </li> <li>no of bins for histogram (max-min divider) </li> </ol> <p> geometry_maker(top,bot,rDepth): Function to make a surface passing through a formation </p> <p>Note: </p> <ul> <li>This function creates a surface passing through a given formation, and conforming formation geometry  based on upper and lower horizon surfaces.  </li> <li>The created surface is used for the visualization of a parameter in the model, such as a log parameter.  A given parameter can be projected (painted) on the created surface </li> <li>Creates a surface named: top@rDepth% </li> </ul> <p>Argument: </p> <ol> <li>name of target formation - must be similar to model formation names in \u201cHorizons\u201d list </li> <li>name of immediate bottom formation - must be similar to model formation names in \u201cHorizons\u201d list </li> <li>relative depth from top of target formation in % ranging 0-100 (entering 50 creates a surface passing  through the middle of the target formation) </li> </ol> <p> geometry_remover(name): Function to remove a geometry  </p> <p>Note: </p> <p>mainly used to remove a geometry surface created by \"geometry_maker\" function  </p> <p>Argument: </p> <ol> <li>geometry name  </li> </ol> <p> export_F3D_logs_forAddedWell(well,depthInterval): Function to export ALL interpolated logs as per  \"Logs\" list for a non-offset well </p> <p>Note :</p> <ul> <li>This function operates on a well added to model using \"add_well\" function. These wells are not  considered as offset wells and are not included data interpolation. An important application of this  function is planned well analysis for well design </li> <li>It exports from interpolated data stored at FLAC3D zone centers (on extra memories corresponding to  imported logs on \u201cLogs\u201d list )</li> </ul> <p>Argument:</p> <ol> <li>Well name: must exist in \" added_Wells \" List </li> <li>Depth interval (sampling interval) for log plot/export</li> </ol> <p> export_F3D_logs_forOriginalWell(well,depthInterval): Function to export ALL interpolated logs as per  \"Logs\" list for an offset well (existing on \u201cWells\u201d list) </p> <p>Note :</p> <ul> <li>This function exports from interpolated data stored at FLAC3D zone centers (on extra memories  corresponding to imported logs on \u201cLogs\u201d list )</li> </ul> <p>Argument:</p> <ol> <li>Well name: must exist in \" Wells \" List </li> <li>Depth interval (sampling interval) for log plot/export</li> </ol>"},{"location":"development.html","title":"for-development","text":""},{"location":"development.html#for-development-trackong-the-changes-delete-in-the-end","title":"for development trackong the changes (delete in the end)","text":"<p>v 0.1 in github 6/27/2025</p>"},{"location":"flac3d-to-petrel-export-functions.html","title":"FLAC3D to Petrel Export Functions","text":"<p>The following functions export FLAC3D model and its attributes to PETREL compatible format. It exports in two  formats: </p> <p>\u2022 GRDCL: (native Eclipse format) exports Mesh and attributes as one file. The attributes\u2019 name  MUST match Petrel existing property names. (This option is currently inactive 03/14/22 AA) </p> <p>\u2022 GSLIP: Exports two files separately: mesh and attributes. Attributes can have any name \u2013 (This  is the current functional version 03/14/22) </p> <p> f3d_export_to_petrel(x0,y0,z0,export_file_name,att_export_flag,fname_,no_of_attributes): exports a  FLAC3D mesh to GSLIP (GRDCL - not active)  format readable by PETREL and ECLIPSE </p> <p>Note: </p> <ul> <li>Also exports zone attributes (from zone extras) and lithology (from group slot 'Geology') </li> <li>Exports to \"FLAC3D/Petrel/\" folder </li> <li>Only works on a structured hexahedral mesh </li> <li>no node to edge connection admissible </li> <li>function uses zone extra 1 for index numbers, which can be used for QC in PETREL. Do not save any attributes on Zone Extra 1 or it will be overwritten by this function </li> <li>An attribute file must be created and stored in \u201cFLAC3D/Petrel/\u201d in \u201c.csv\u201d format prior to a call to this  function. The attribute file holds zone extra number in column 1 and the corresponding attribute name  in column 2 </li> </ul> <p>Argument:</p> <ul> <li>1-3. coordinate of the north-west corner of the mesh (upper most z) with respect to mesh local axis </li> <li> <ol> <li>Mesh export file name (User defined) </li> </ol> </li> <li> <ol> <li>set to \"YES\" to export attribute files, set to \"NO\" for grid export only </li> </ol> </li> <li> <ol> <li>attribute file name stored in \u201cFLAC3D/Petrel/\u201d folder  </li> </ol> </li> <li> <ol> <li>number of attributes to be read from FLAC3D model and exported to Petrel. Must match  \u201cFLAC3D/Petrel/attribute_file.csv\u201d listed number of attributes or it return error and abort execution</li> </ol> </li> </ul> <p>APPENDIX 1: Project Folder Structure and Input File Format</p> <p>For each project create a new folder and rename it to FLAC3D. Place a shortcut to the FLAC3D exe file (set to \u2018run  as administrator\u2019) in the FLAC3D folder and add the following folders: </p> <p> Figure 1: Content of \"FLAC3D/\" folder</p> <p>NOTE: </p> <p>Folder names must be identical to the names shown above (\u20183D-GM_Project_AA.prj\u2019 is project name and be changed to any name,  usually actual project name) </p> <p>Below is description of each folder and its contents: </p> <p>\u201cFLAC3D/Deviation\u201d: holds wellbore trajectories. Note the followings:</p> <p>I. Well trajectory name must follow the below format: \u2018well name\u2019_traj.csv (for well name \u2018BH-3\u2019 the trajectory name must read \u201cBH-3_traj.csv \u201c) </p> <p> Figure 2: Content of \u201cFLAC3D/Deviation/\u201d folder </p> <p>II. The trajectory file must be sored as \u2018csv\u2019 and follow the format shown below: </p> <p> Figure 3: Contents of \u201cFLAC3D/Deviation/BH-name_traj.csv\u201d trajectory files (Note: z is in TVDSS format)  </p> <p>\u201cFLAC3D/Fault\u201d: Holds fault geometries in \u2018stl\u2019 format (faults can be stored as stl format using Rhino CAD tool).  Fault files should be stored as \u2018fault name\u2019.stl, as shown below:  </p> <p> Figure 4: contents of \u201cFLAC3D/Fault/\u201d folder </p> <p>\u201cFLAC3D/Horizon\u201d: stores two sets of files:  I.  \u201cFormationTops.csv\u201d which is the main file for model setup. It includes the list of formations and offset  wells and formation tops along the wells in TVDSS. This file must be generated for each project and stored  in the \u201cHorizon\u201d folder of the FLAC3D project. This file introduces the name of formations and wells to the  model and cannot be changed later. Figure below shows the content and format of this file. </p> <p> Figure 5: \u201cFormationTops.csv\u201d file. Formations must be sorted from top to bottom. Missing formation tops must be marked by \u20189999\u2019. </p> <p>II.  Formation horizon files in \u2018stl\u2019 format. Horizon file names must follow the formation names listed in the  \u201cFormationTops.csv\u2019, or they will not be imported into the model.  </p> <p>Figure below shows the content of \u201cFLAC3D/Horizon/\u201d folder </p> <p> Figure 6: Content of \u201cFLAC3D/Horizon/\u201d folder </p> <p>\u201cFLAC3D/Input\u201d: holds other input data such as kriging output, which must be stored in this folder for functions  to work. It is also recommended to store any other user-inputs in this folder </p> <p> Figure 7: Contents of \u201cFLAC3D/Input/\u201d folder (showing Kriging output files)  </p> <p>\u201cFLAC3D/Log\u201d: contains the well logs in \u2018csv\u2019 format. File names must follow \u2018well name\u2019_Log.csv naming format.  For a well named \u2018BH-3\u2019 the log file name must read \u2018BH-3_Log.csv\u2019. Well names must be identical to those listed  in the \u2018FormationTops.csv\u2019 file or will not be imported. Figure below shows an example content of \u201cFLAC3D/Log/\u201d  folder. </p> <p> Figure 8: Contents of \u201cFLAC3D/Log/\u201d folder.</p> <p>The logs must be stored in csv format and include all logs for the offset well as shown in figure below:</p> <p> Figure 9: Well log format for import to 3D geomechanical model. Any invalid data must read \u2018-9999\u2019. </p> <p>NOTE: all offset well logs must be consistent in terms of data, order, and format. (NOTE: if an offset well missing  a certain log, set all data values to \u2018-9999\u2019 for that specific log \u2013 it should still exist in the log file) </p> <p>\u201cFLAC3D/Output/\u201d: folder to store all model outputs. All plug-in functions export to this folder. It is recommended  to use this folder for any user-defined output, too.  </p> <p>\u201cFLAC3D/Rhino/\u201d: Folder to store project Rhino file. The plug-in has no direct call to this folder.  </p> <p>\u201cFLAC3D/Script/\u201d: Folder to store all user scripts (FISH and command) for the project. It is highly recommended  to follow more or less a similar order as shown in figure below, for the scripts as it follows workflow steps. </p> <p> Figure 10: Typical contents in \u201cFLAC3D/Script/\u201d folder. It can change as per project requirements  </p> <p>\u201cFLAC3D/Petrel/\u201d: Holds the attribute file and export to PETREL files. The attribute file must exist in this folder  before a call to export to Petrel function. The attribute file must be stored as a csv file with first column  representing FLAC3D zone number and second one the corresponding attribute name, as shown below. No limit  on the number of attributes to export. </p> <p> Figure 11: Example contents of attribute csv file for export to PETREL  </p> <p>Zone Extras  Some functions use zone extra memories for operations. Table below lists all functions writing to FLAC3D zone  extras. Changing the contents of zone extras may result in failure of other functions\u2019 operation. Be careful when  overwriting the zone extra values. Most of the default zone extra values can be safely overwritten after model  initialization step is complete and properties are assigned to corresponding constitutive model parameters (and  if not necessary for export to PETREL) </p> Function Group Zone Extra Number Comment <code>condition_mesh_for_dataImport</code> Mesh Generation &amp; Model Setup Functions          1: zone relative dist from formation top         2: formation thickness        Must remain unchanged until after data population <code>log_assign_zone</code> Data Interpolation Functions Corresponding to \u201cLog\u201d attribute name          Use \u201cfish list contents \u2018Logs\u2019\u201d to see extra numbers corresponding to log values         (after calling Well_log_import_all)        <code>Shmin_SHmax_azimuth</code> Auxiliary Functions User defined <code>zone_log_interpolator</code> Data Interpolation Functions Corresponding to \u201cLog\u201d attribute name          Use \u201cfish list contents \u2018Logs\u2019\u201d to see extra numbers corresponding to log values         (after calling Well_log_import_all)        <code>f3d_export_to_petrel</code> FLAC3D to Petrel Export Functions 1: zone ijk index Will export to PETREL for QC <p>function to export lithology from zone group 'Geology' - zone groups must exist in 'Geology' slot </p>"},{"location":"general-notes.html","title":"General notes","text":"<p>All functions are run on FLAC3D version 7 and use some FLAC3D built-in utilities. Modeling settings are: </p> <p> All Z values are TVDSS shown as negative (-) numbers below mean sea level. all imported data must follow  this convention </p> <p> Invalid data (log and zone property) is -9999 </p> <p> Invalid depth values (well picks, or any other depth related) 9999 </p> <p> Most functions generate an informative error message if fail to operate successfully. The message is  printed in FLAC3D command window upon function run.  </p>"},{"location":"inquiry-functions.html","title":"Inquiry Functions","text":"<p>Functions in this section can be used to visualize, make inquires and export data from model. Their operation has  no effect on model results and state.  </p> <p> export_WellPicks_AllWells: function to export well picks in TVDSS for all offset wells in model. </p> <p>Note: </p> <ul> <li>Operates just on offset wells imported by \"Import_Wells\" function and well name must exist in \u201cWells\u201d  list </li> <li>Returns 9999 if fails to find a well-to-horizon intersection (no well trajectory, no horizon, no intersection) </li> <li>Export results to \"Output/F3D_FormationTops.csv\". Overrides if file already exists. </li> </ul> <p>Argument: None </p> <p> export_WellPicks_OneWell(wellName): function to export well picks (TVDSS) for a given well </p> <p>Note : </p> <ul> <li>Operates on offset and non-offset wells imported by \"Import_Wells\" and \u201cadd_well\u201c functions  </li> <li>Returns 9999 if fails to find a well-to-horizon intersection (no well trajectory, no horizon, no intersection) </li> <li>Export results to \"Output/F3D_FormationTops_wellName.csv\". Overrides if file already exists </li> </ul> <p>Argument:</p> <ol> <li>Well name: must exist in either \u201cWells\u201d or \u201cadded_Wells\u201d list </li> </ol> <p> export_F3D_ZoneExtra_MD(wellName,extra,depthInterval,name): Function to export a zone extra  parameter  </p> <p>Note: </p> <ul> <li>Operates on offset and non-offset wells imported by \"Import_Wells\" and \u201cadd_well\u201c functions  </li> <li>Exports to file \"F3D_Export_extrax_wellName_MD.csv\" stored in \"Output/\" folder. Overrides if file  already exists </li> </ul> <p>Argument:</p> <ol> <li>Well name: must exist in either \u201cWells\u201d or \u201cadded_Wells\u201d list </li> <li>zone extra number from which data is exported </li> <li>export sampling (data) depth interval (MD) </li> <li>User-defined name for exported parameter - is added to header of exported file </li> </ol> <p> export_F3D_ZoneExtra_allWells_MD(extra,depthInterval): Function to export a zone extra parameter for  all wells existing in model </p> <p>Note: </p> <ul> <li>Operates on offset and non-offset wells imported by \"Import_Wells\" and \u201cadd_well\u201c functions  </li> <li>Exports to separate files \"F3D_Export_extrax_wellName_MD.csv\" stored in \"Output/\" folder. Overrides  if file already exists  Argument: </li> <li>zone extra number from which data is exported </li> <li>export sampling (data) depth interval (MD) </li> </ul> <p> plot_zone_extra(well,zextra,name,depthInterval): Function to plot a zone extra along a well in model in  TVDSS </p> <p>Note: </p> <p>Operates on offset and non-offset wells imported by \"Import_Wells\" and \u201cadd_well\u201c functions Use \u201cPlot Table\u201d FLAC3D command to see the output. X-axis is TVDSS, y-axis is data numeric value </p> <p>Argument:</p> <ol> <li>Well name: must exist in either \u201cWells\u201d or \u201cadded_Wells\u201d list </li> <li>zone extra number (integer)  </li> <li>User-defined name for extracted parameter (is used for plot legend) </li> <li>depth interval for sampling </li> </ol> <p> plot_zone_extra_remove(well,zextra): function to delete generated plot by \u201cplot_zone_extra\u201d function </p> <p>Note: </p> <p>Use to avoid generating too many plots </p> <p>Argument:</p> <ol> <li>Well name: must exist in either \u201cWells\u201d or \u201cadded_Wells\u201d list </li> <li>zone extra number (integer) </li> </ol>"},{"location":"list.html","title":"List","text":"<p>The following lists are generated as data (logs, formation horizons, faults, well trajectories) are imported for model  construction. These lists are used for data population and data inquiry. Names of data sets in the lists are set by  main input data files such as \"FormationTops.csv\", and can\u2019t be changed. To see the content of the lists type and  execute this command in FLAC3D command line: fish list contents \u2018List-name\u2019 </p> <p> Wells: (key=well name, value='True'/'False') holds imported well names and a 'True' or 'False' flag  indicating whether a well trajectory has been imported for the well (It is generated by  \"Import_Well_Names\" function )</p> <p> Horizons: (key=integer, value=string) key is just a row number. Value is the row of data read from  \"Horizon/FormationTops.csv\" file, which holds formation names by their well picks for all imported wells  (It is generated by \" Import_Horizons \" function) </p> <p> Faults: (key=fault geometry set name, value=fault name) it is used to group model zones intersecting  faults (It is generated by \"import_faults\" function) </p> <p> Logs: (key=log name, value=extra index) log names are read from \"borehole-name\"_log.csv files in \u201cLog\u201d  folder (It is generated by \"Well_log_import_all\" function) </p> <p> added_Wells: (key=well name, value='True'/'False') holds a list of added wells. The wells stored in this  map will not be included in any data population and interpolation. Just for inquiry and visualization (It is  generated at the beginning of project. Wells are added/removed by \"add_well\" and \"remove_well\"  functions) </p>"},{"location":"mesh-generation.html","title":"Mesh Generation & Model Setup Functions","text":"<p> Import_Wells: imports all offset wells into model. </p> <p>Note:  </p> <ul> <li>Offset wells must be listed in \"FLAC3D/Horizon/FormationTops.csv\" </li> <li>Well deviations must be available in xyz (TVDSS) format in \"FLAC3D/Deviation/\u201d folder  </li> <li>Deviation file names must follow \u201cwellNmae_traj.csv format \u201c </li> <li>Well names must be exactly similar to well names listed in \"FLAC3D/Horizon/FormationTops.csv\" </li> </ul> <p>Arguments: None </p> <p> Import_Horizons: Imports formation horizons into model </p> <p>Note:  </p> <ul> <li>Formation names are taken from \"FLAC3D/Horizon/FormationTops.csv\" </li> <li>Formation horizons must be saved in \u201cstl\u201d format and saved in \"FLAC3D/Horizon/\u201d folder </li> <li>It imports all available horizons (stl) and skips the horizons for which a stl file does not exist </li> <li>Formation horizons stl files must have exact same name as in \"FLAC3D/Horizon/FormationTops.csv\" </li> <li>stl files must be saved in binary format</li> </ul> <p>Argument: None </p> <p> Horizon_adjust(formation,max_zAdjust,search_rad,power): Function to adjust a formation horizon to  well picks listed in \"Horizon/FormationTops.csv\" </p> <p>Note: This function can be used to enforce full match between imported horizons and well formation tops  </p> <p>Argument: </p> <ol> <li>formation horizon name </li> <li>maximum vertical adjustment allowed by user (m for project in SI unit) </li> <li>lateral extent of adjustment (adjustment is gradual, from max at well to zero at this distance).  </li> <li>exponent for IDW function. Range from 1-3. lower values=&gt; smoother adjustment, higher value=&gt;  sharper adjustment closer to wells </li> </ol> <p> Horizon_copy(source_geom,target_geom,z_shift): function to create a formation horizon from an  existing horizon by depth shift  Note: None</p> <p>Argument:  </p> <ol> <li>Source geometry existing in model imported by \u201cImport_Horizons\u201d function or created later </li> <li>Target geometry created by this function uperation </li> <li>Vertical shift: positive for upward, negative for downward shift  </li> </ol> <p> import_faults: function to import faults from \"FLAC3D/Fault/\u201d folder </p> <p>Note:  </p> <ul> <li>Faults must be stored as stl surface files in the following format \u201cfaultName.stl\u201d </li> <li>Same fault names will be assigned to the zones intersected by faults by \u201cidentify_fault_zones\u201d function </li> <li>Faults can be converted to stl from xyz point cloud by Rhino CAD tool Argument: None  </li> </ul> <p> identify_fault_zones: function to identify and mark FLAC3D zones intersected by faults.  </p> <p>Note:  </p> <ul> <li>This function must be called after mesh is built and finalized  </li> <li>This function must be called after \u201cimport_faults\u201d function call </li> </ul> <p>Argument: None </p> <p> vertical_densifier(formation,slot,max_Height): function to reduce zone height to less than a user-defined  max zone height for a given formation on a given slot. </p> <p>Note:  </p> <ul> <li>This function must be called after mesh is built and finalized </li> </ul> <p>Argument:</p> <ol> <li>Target formation name (zone group name) for densification </li> <li>FLAC3D zone slot number on which target formation name is stored </li> <li>user-defined max height. Any zone with height equal or greater than this number will be densified until  its height drops below this number </li> </ol> <p> Zone_Count: function to count number of zones in model. </p> <p>Note:  </p> <ul> <li>Initializes \u201cZone_Count\u201d variable in \"FISH Global Symbols\" table </li> <li>This function must be called after mesh is built and finalized </li> </ul> <p>Argument: None </p> <p> condition_mesh_for_dataImport: function to prepare mesh for data population.  </p> <p>Note: </p> <ul> <li>Calculates formation thickness (saves on Zone Extra 2) </li> <li>Calculates relative depth of zone centers with respect to formation top (ranging from 0 to 1) and saves  on zone Extra 1 (not to be overwritten until after data population) </li> <li>Must be called before data population (both Kriging or IDW) </li> <li>Must be called after mesh is finalized (and before importing offset well logs) </li> <li>It works just on hexahedral elements \u2013 no tetrahedral zones </li> </ul> <p>Argument: None</p>"},{"location":"model-initialization-function.html","title":"Model Initialization Functions","text":"<p> apply_stress_boundary_all_sides: Function to apply zone stresses to all boundary zone faces (sides and  top/bottom) for initial equilibrium </p> <p>Note: </p> <p>\"Zone face skin\" must have been called before a call to this function. Model boundaries must be saved  as \"Top\",\"Bottom\",\"East\",\"West\",\"North\" and \"South\" on slot \"Boundary\" for this function to work    </p> <p>Argument: None </p> <p> apply_stress_boundary_lateral: Function to apply zone stresses to model lateral boundaries (just sides \u2013  as opposed to above function) for initial equilibrium  </p> <p>Note :</p> <p>\"Zone face skin\" must have been called before a call to this function. Model boundaries must be saved  as \u201cEast\",\"West\",\"North\" and \"South\" on slot \"Boundary\" for this function to work </p> <p>Argument: None </p> <p> horizontal_stress_from_pStr(zone_pnt,Shmin,SHmax,SHmax_azimuth): Function to calculate and assign  zone stress tensor to each zone using Shmin, SHmax and SHmax azimuth.  </p> <p>Note: </p> <ul> <li>should be called for each zone (use it in a loop structure) </li> </ul> <p>Argument:</p> <ol> <li>pointer to zone </li> <li>Shmin magnitude </li> <li>SHmax magnitude </li> <li>SHmax azimuth (positive from north CW) </li> </ol> <p>Next four functions are inquiry functions, which can be useful after model initialization </p> <p> plot_F3D_log_forAddedWell(well,log_para,depthInterval,export_flag): Function to plot or export a log  value (must exist in \"Logs\" list) for a non-offset well</p> <p>Note : </p> <ul> <li>This function operates on non-offset wells only (wells added to model using \"add_well\" function) </li> <li>User can chose to export the log (to \"Output/\" folder) or just generate FLAC3D plot </li> </ul> <p>Argument:</p> <ol> <li>Well name: must exist in \"added_Wells\" list </li> <li>log name to be plotted/exported: must exist in \"Logs\" list </li> <li>Depth interval (sampling interval) for log plot/export </li> <li>Log export flag. \"YES\" enforces log export. Any other entry will do nothing </li> </ol> <p> plot_F3D_stress(well,stress_comp,depthInterval,export_flag): Function to plot or export a stress  component </p> <p>Note: </p> <p>Works for all wells existing in model, either on \"Wells\" or \"added_Wells\" list  User can choose to export stress profile (to \"Output/\" folder) </p> <p>Argument: </p> <ol> <li>Well name: must exist in \"added_Wells\" or \"Wells\" list </li> <li>stress component to be plotted (valid entries are: xx, yy, zz, maximum, minimum, intermediate) </li> <li>Depth interval (sampling interval) for log plot/export </li> <li>Log export flag. \"YES\" enforces log export. Any other entry will do nothing </li> </ol> <p> plot_F3D_zpressure(well,depthInterval,export_flag): Function to plot or export zone pressure </p> <p>Note: </p> <p>Works for all wells existing in model, either on \"Wells\" or \"added_Wells\" list  User can choose to export pressure profile (to \"Output/\" folder) </p> <p>Argument:  1. Well name: must exist in \"added_Wells\" or \"Wells\" list  2. Depth interval (sampling interval) for log plot/export  3. Log export flag. \"YES\" enforces log export. Any other entry will do nothing </p> <p> Export_F3D_StrPress_MD(well,depthInterval): Function to export stress components (min/int/max) and  pressure from FLAC3D zones </p> <p>Note: </p> <ul> <li>Works for all wells existing in model, either on \"Wells\" or \"added_Wells\"  </li> </ul> <p>Argument:</p> <ol> <li>Well name: must exist in \"added_Wells\" or \"Wells\" list </li> <li>Depth interval for log plot/export </li> </ol>"},{"location":"offset-well-log.html","title":"Offset Well Log Import","text":"<p>The following functions operate on offset well logs: importing, processing, visualizing </p> <p> Well_log_import_all: Function to import logs for all wells already added to model by \"Import_Wells\".  </p> <p>Note: </p> <ul> <li>A well trajectory must exist for all wells for which logs are imported. Any log data point falling out of  well trajectory coverage is ignored and not imported.  </li> <li>Consistent with general depth convention, all depths in logs must be TVDSS reported in neg number for  below MSL </li> <li>Function reads csv logs stored in \"FLAC3D/Log/\u201d folder. The \u201ccsv\u201d logs must have the names exactly  similar to the well name imported already by \"Import_Wells\u201d function. </li> <li>Name of log parameters ( such as DTC, DTS, etc.) are read from column header in \u201cwell_name.csv\u201d and  are registered in the \u201cLogs\u201d list  </li> <li>The log list can be printed by: \u201cfish list contents Logs\u201d.  </li> <li>Log parameter names and order must be consistent for all wells. </li> </ul> <p>Argument: None</p> <p>The following functions are auxiliary functions for QC/QA of imported log </p> <p> log_coverage_one_parameter(log_para_name): Function to export log coverage for all formations and  all offset wells in model. It exports log coverage for each formation in percentage. Note:  </p> <ul> <li>Exports to \"Output/Log_Coverage_log_para.csv\" </li> </ul> <p>Argument:  </p> <ol> <li>inquiry log parameter (such as DTC \u2013 must exists in the Logs list (imported by \"Well_log_import_all\") )</li> </ol> <p> log_coverage_well(well): Function to export log coverage (all logs in \"Logs\" list) along a given offset well  imported in model.  </p> <p>Note:  </p> <p>-It exports log coverage for each formation in %. Exports to \"Output/Log_Coverage_well.csv\"</p> <p>Argument:  </p> <ol> <li>inquiry well name. Must exist in \"Wells\" table (imported by \"Import_Wells\") </li> </ol> <p> plot_smoothed_log_rDepth(formation,well,log,log_pick_method,user_defined_sr): Function to visualize  log smoothing operation results. </p> <p>Note:  </p> <p>This function does not change the original log but shows how user selected smoothing method operates  on a given log. It is recommended to use smoothed logs for log interpolation to remove noises. In order  to see the result, use plot \"Table\" command: x-axis is relative depth, ranging from 0 (formation top) to 1  (formation bottom), y-axis log value </p> <p>Argument:  </p> <ol> <li>formation name. Must exist in \"Horizons\" list (on slot \"Geology\") </li> <li>well name. Must exist in \"Wells\" list </li> <li>log name. Must exist in \"Logs\" list.  </li> <li>log smoothing method: enter \"1\" to enforce smoothing (on \"user_defined_sr\" depth interval) or , \"2\u201d  to avoid smoothing.  </li> <li>smoothing interval in relative depth, ranges 0 to 1. Higher number more smoothing. Selecting \u201c1\u201d  results in including all log data points in the given formation, for smoothing operation at each point </li> </ol> <p> plot_imported_log_rDepth(formation,well,log_para): function to plot a given imported log, for a given  well in a given formation, in relative depth format. </p> <p>Note: </p> <p>Use the command \u201cPlot Table\u201d to see the log. x-axis is relative depth, ranging from 0 (formation top) to  1 (formation bottom), y-axis log value </p> <p>Argument:</p> <ol> <li>formation name. Must exist in \"Horizons\" list (on slot \"Geology\") </li> <li>well name. Must exist in \"Wells\" list </li> <li>log name. Must exist in \"Logs\" list</li> <li>log smoothing method: enter \"1\" to enforce smoothing (on \"user_defined_sr\" depth interval) or , \"2\u201d  to avoid smoothing.  </li> <li>smoothing interval in relative depth, ranges 0 to 1. Higher number more smoothing. Selecting \u201c1\u201d  results in including all log data points in the given formation, for smoothing operation at each point </li> </ol> <p> plot_imported_log_rDepth(formation,well,log_para): function to plot a given imported log, for a given  well in a given formation, in relative depth format. </p> <p>Note: </p> <p>Use the command \u201cPlot Table\u201d to see the log. x-axis is relative depth, ranging from 0 (formation top) to  1 (formation bottom), y-axis log value </p> <p>Argument: </p> <ol> <li>formation name. Must exist in \"Horizons\" list (on slot \"Geology\") </li> <li>well name. Must exist in \"Wells\" list </li> <li>log name. Must exist in \"Logs\" list </li> </ol> <p> plot_imported_logs_rDepth_add(formation,log):  function to plot a given log (for all wells) in relative  depth in a given formation </p> <p>Note:  </p> <p>Use command \u201cPlot Table\" to see the log. x-axis is relative depth, ranging from 0 (formation top) to 1  (formation bottom), y-axis is log value </p> <p>Argument: </p> <ol> <li>formation name. Must exist in \"Horizons\" list (on slot \"Geology\") </li> <li>log name. Must exist in \"Logs\" list </li> </ol> <p> plot_imported_logs_rDepth_remove(formation,log): function to remove plots created by above  function.  </p> <p>Note: </p> <p>Use this function to avoid generating unnecessary \"Tables (graphs)\" </p> <p>Argument: </p> <ol> <li>formation name. Must exist in \"Horizons\" list (on slot \"Geology\") </li> <li>log name. Must exist in \"Logs\" list</li> </ol> <p>plot_imported_log(well,log) : plots an imported log vs TVDSS.  </p> <p>Note: </p> <p>Use FLAC3D command \u201cPlot Table\u201d to see the log. x-axis is TVDSS, y-axis is log value </p> <p>Argument: </p> <ol> <li>well name. Must exist in \"Wells\" list </li> <li>log name. Must exist in \"Logs\" list </li> </ol>"}]}